package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"Ozon_testtask/internal/models"
	"context"
	"fmt"
)

// AddPost is the resolver for the addPost field.
func (r *mutationResolver) AddPost(ctx context.Context, post models.NewPost) (*models.Post, error) {
	ctxWithTimeout, cancel := context.WithTimeout(ctx, TimeoutTime)
	defer cancel()

	createdPost, err := r.PostService.AddPost(ctxWithTimeout, post.Title, post.Content, post.CommentsAllowed)
	if err != nil {
		r.Logger.Error("AddPost Resolver Service Error: ", err)
		return nil, err
	}

	return &createdPost, nil
}

// AddComment is the resolver for the addComment field.
func (r *mutationResolver) AddComment(ctx context.Context, comment models.NewComment) (*models.Comment, error) {
	ctxWithTimeout, cancel := context.WithTimeout(ctx, TimeoutTime)
	defer cancel()

	postComments, err := r.CommentService.CommentPost(ctxWithTimeout, comment.Author, comment.PostID, comment.Content)
	if err != nil {
		r.Logger.Error("AddComment Resolver Service Error: ", err)
		return nil, err
	}

	return &createdPost, nil
}

// ToggleComments is the resolver for the toggleComments field.
func (r *mutationResolver) ToggleComments(ctx context.Context, postID string, allowed bool) (*models.Post, error) {
	panic(fmt.Errorf("not implemented: ToggleComments - toggleComments"))
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*models.Post, error) {
	panic(fmt.Errorf("not implemented: Posts - posts"))
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id string) (*models.Post, error) {
	panic(fmt.Errorf("not implemented: Post - post"))
}

// Comments is the resolver for the comments field.
func (r *queryResolver) Comments(ctx context.Context, postID string) ([]*models.Comment, error) {
	panic(fmt.Errorf("not implemented: Comments - comments"))
}

// CommentAdded is the resolver for the commentAdded field.
func (r *subscriptionResolver) CommentAdded(ctx context.Context, postID string) (<-chan *models.Comment, error) {
	panic(fmt.Errorf("not implemented: CommentAdded - commentAdded"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
